# PostgreSQL. Versions 9.3 and up are supported.
#
# Install the pg driver:
#   gem install pg
# On macOS with Homebrew:
#   gem install pg -- --with-pg-config=/usr/local/bin/pg_config
# On Windows:
#   gem install pg
#       Choose the win32 build.
#       Install PostgreSQL and put its /bin directory on your path.
#
# Configure Using Gemfile
# gem "pg"
#
default: &default
  adapter: postgresql
  encoding: unicode
  pool: <%= ENV.fetch("RAILS_MAX_THREADS") { 5 } %>

sqlite: &sqlite
  adapter: sqlite3
  pool: <%= ENV.fetch("RAILS_MAX_THREADS") { 5 } %>
  timeout: 5000

development:
  primary:
    <<: *default
    database: app1_development
  cache:
    <<: *sqlite
    database: app1_development_cache.sqlite3
    migrations_paths: db/cache_migrate
  queue:
    <<: *sqlite
    database: app1_development_queue.sqlite3
    migrations_paths: db/queue_migrate
  cable:
    <<: *sqlite
    database: app1_development_cable.sqlite3
    migrations_paths: db/cable_migrate

# Warning: The database defined as "test" will be erased and
# re-generated from your development database when you run "rake".
# Do not set this db to the same as development or production.
test:
  <<: *default
  database: app1_test

#   production:
#     url: <%= ENV["MY_APP_DATABASE_URL"] %>
#
# Read https://guides.rubyonrails.org/configuring.html#configuring-a-database
# for a full overview on how database connection configuration can be specified.
#
production:
  primary: &primary_production
    <<: *default
    database: app1_production
    username: app1
    password: <%= ENV["APP1_DATABASE_PASSWORD"] %>
  cache:
    <<: *sqlite
    database: production_cache.sqlite3
    migrations_paths: db/cache_migrate
  queue:
    <<: *sqlite
    database: production_queue.sqlite3
    migrations_paths: db/queue_migrate
  cable:
    <<: *sqlite
    database: production_cable.sqlite3
    migrations_paths: db/cable_migrate
